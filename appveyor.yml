os: Visual Studio 2015

environment:
  nodejs_version: "4.4.7"
  matrix:
    - language: cpp
      PYTHON3: "C:\\Python34"
      PYTHON3_VERSION: "3.4.3"
      PYTHON3_ARCH: "32"
      # PYTHON2.7 REQUIRED FOR NODE-GYP & ELECTRON
      PYTHON2: "C:\\Python27"
      PYTHON2_VERSION: "2.7.9"
      PYTHON2_ARCH: "32"

  PIP3: C:\\Python34\Scripts\pip
  PIP2: C:\\Python27\Scripts\pip

  npm_config_arch: ia32



platform: x86

configuration: Release

init:
# NOTE: OTONE-FRONTEND NOT CLONED YET

# 1. ENSURE CORRECT VERSION OF DEV TOOLS

  - "ECHO Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - cmd: ECHO Processor architecture - %PROCESSOR_ARCHITECTURE%
  - cmd: wmic OS get OSArchitecture
  - cmd: npm config set msvs_version 2015 --global

  - cmd: ECHO %PYTHON3% %PYTHON3_VERSION% %PYTHON3_ARCH%
  - cmd: "%PYTHON3%\\python --version"
  - cmd: "%PYTHON3%\\python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - cmd: "%PYTHON3%\\python -m pip install --upgrade pip"

  - cmd: ECHO %PYTHON2% %PYTHON2_VERSION% %PYTHON2_ARCH%
  - cmd: "%PYTHON2%\\python --version"
  - cmd: "%PYTHON2%\\python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - cmd: "%PYTHON2%\\python -m pip install --upgrade pip"

  - ps: Install-Product node 6.0.0 x86
  - cmd: node --version
  - cmd: npm --version
  # CRITICAL FOR NODE-GYP TO WORK
  - cmd: npm -g install npm@latest

# You can use the following PowerShell code to get the full list of software installed on build worker
# from(https://www.appveyor.com/docs/installed-software):
#  - ps: $x64items = @(Get-ChildItem "HKLM:SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall")
#  - ps: $x64items + @(Get-ChildItem "HKLM:SOFTWARE\wow6432node\Microsoft\Windows\CurrentVersion\Uninstall") `
#     | ForEach-object { Get-ItemProperty Microsoft.PowerShell.Core\Registry::$_ } `
#     | Sort-Object -Property DisplayName `
#     | Select-Object -Property DisplayName,DisplayVersion


# 2. SET THE RELEVANT PYTHON AND PIP LOCATIONS IN THE PATH
  - cmd: set PATH=%PYTHON3%;%PYTHON3%\scripts;%PYTHON2%;%PYTHON2%\scripts;%PATH%
  - cmd: ECHO Path - %PATH%


install:
# NOTE: OTONE-FRONTEND NOW CLONED INTO C:\\PROJECTS\OTOONE-FRONTEND

# 1. INSTALL PYTHON DEPENDENCIES
  - cmd: "%PIP3% install -r requirements.txt"
  # Ensure any submodules are updated, initialized if necessary, and do it recursively
  - cmd: git submodule update --init --recursive

  # Show installed python2 packages in requirements format
  - cmd: "%PIP2% freeze"
  # Show installed python3 packages in requirements format
  - cmd: "%PIP3% freeze"

# 2. BUILD BACKEND EXECUTABLE
  - cmd: "%PYTHON3%\\python scripts\\build_pyinstaller.py"


# 3. PREPARE NPM FOR ELECTRON APP BUILD
  - cmd: npm config list
  - cmd: npm config set python %PYTHON2%\python.exe --global
  - cmd: npm uninstall node-gyp -g
  - cmd: npm uninstall node-gyp
  - cmd: npm install node-gyp
  - cmd: npm install node-gyp -g
  - cmd: node-gyp --python %PYTHON2%
  - cmd: npm install bufferutil -g
  - cmd: npm install electron-packager --save-dev
  - cmd: npm install electron-packager -g
  - cmd: npm install electron-prebuilt --save-dev
  - cmd: npm install electron-prebuilt -g
  - cmd: npm prune

# 4. INSTALL NODE DEPENDENCIES
  - cmd: npm install
  - cmd: set PATH=%PATH%;C:\projects\appveyor\node_modules\
  - cmd: cd C:\projects\otone-frontend

# 5. BUILD ELECTRON APP
  - cmd: "%PYTHON2%\\python scripts\\build_electron_app.py"

# 6. PACKAGE ELECTRON APP
  - cmd: dir
  # RELEASES DIRECTORY REQUIRED FOR scripts\zip_ot_app.py

  - cmd: dir app
  - cmd: dir backend\backend
  - cmd: dir out
  - cmd: dir build
  - cmd: mkdir releases

  - cmd: python scripts\zip_ot_app.py
  - cmd: dir releases
  - cmd: dir out\OpenTrons-win32-ia32


build: off

before_deploy:
  - ps: Get-ChildItem .\releases\*.zip | % { Push-AppveyorArtifact $_.FullName -FileName $_.Name -DeploymentName OTAppWin}

deploy:
  - provider: S3
    access_key_id: $(AWS_ACCESS_KEY)
    secret_access_key: $(AWS_SECRET_KEY)
    bucket: ot-app-builds
    region: us-east-1
    set_public: true
    folder: win
    artifact: OTAppWin
    on:
      branch: 16-add-ci-cd-pipeline-for-windows-app-frontend
